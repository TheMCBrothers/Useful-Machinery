buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id "me.hypherionmc.cursegradle" version "2.0.1"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'
apply plugin: 'maven-publish'

group = 'themcbros.usefulmachinery' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'usefulmachinery'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: project.mc_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                usefulmachinery {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                usefulmachinery {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'usefulmachinery', '--all', '--output', file('src/generated/resources/')

            mods {
                usefulmachinery {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.java {
    exclude '**/compat/top/**'
}

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        // TOP
        name = "tterrag maven"
        url = "https://maven.tterrag.com/"
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    if (project.hasProperty('jei_version')) {
        // JEI
        compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
        runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
    }

    if (project.hasProperty('top_version')) {
        // TOP
        compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${top_version}:api")
        runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-${top_version}")
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "usefulmachinery",
                "Specification-Vendor"    : "themcbrothers",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "themcbrothers",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

private String getCurseForgeToken() {
    File secretFile = file('secrets.properties')

    if (secretFile.canRead()) {
        Properties secretProps = new Properties()
        secretProps.load(new FileInputStream(secretFile))

        return secretProps['curseForgeToken'].toString()
    }

    return null
}

// For CurseForge Deployment
curseforge {
    apiKey = getCurseForgeToken() // This should be kept private.
    options {
        forgeGradleIntegration = true
    }
    project {
        id = '355129' // The ID of your project. You can find this on your project Curseforge page
        changelog = file('changelog.txt') // A file can also be set using: changelog = file('changelog.txt')
        releaseType = project.curse_type // beta, alpha, release
        addGameVersion(project.mc_version)
        mainArtifact() {
            displayName = "$project.modname $project.version"
        }
    }
}
