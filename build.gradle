buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = "https://nexus.themcbrothers.net/repository/maven-minecraftforge/" }
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
    }
}

plugins {
    id "me.hypherionmc.cursegradle" version "2.0.1"
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "idea"
apply plugin: "maven-publish"

group = "net.themcbrothers" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "usefulmachinery"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: "official", version: project.mc_version

    runs {
        client {
            workingDirectory project.file("run")

            // Recommended logging data for a userdev environment
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"

            // Recommended logging level for the console
            property "forge.logging.console.level", "debug"

            mods {
                usefulmachinery {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file("run")

            // Recommended logging data for a userdev environment
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"

            // Recommended logging level for the console
            property "forge.logging.console.level", "debug"

            mods {
                usefulmachinery {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file("run")

            // Recommended logging data for a userdev environment
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"

            // Recommended logging level for the console
            property "forge.logging.console.level", "debug"

            args "--mod", "usefulmachinery", "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/")

            mods {
                usefulmachinery {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir "src/generated/resources"
}

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://nexus.themcbrothers.net/repository/maven-progwml6"
    }
    maven {
        // TOP
        name = "k4you"
        url = "https://nexus.themcbrothers.net/repository/maven-k4you"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://nexus.themcbrothers.net/repository/maven-mod"
    }
    maven {
        name = "themcb-nexus"
        url = "https://nexus.themcbrothers.net/repository/maven-releases/"
    }
    maven {
        name = "themcb-nexus-snapshots"
        url = "https://nexus.themcbrothers.net/repository/maven-snapshots/"
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then "net.minecraft" it is assumed
    // that the dep is a ForgeGradle "patcher" dependency. And it"s patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    if (project.hasProperty("jei_version")) {
        // JEI
        runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
        compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
        compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    }

    if (project.hasProperty("top_version")) {
        // TOP
        compileOnly "mcjty.theoneprobe:theoneprobe:${top_version}:api"
        runtimeOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}", { transitive = false })
    }

    if (project.hasProperty("usefulfoundation_version")) {
        // Useful Foundation
        implementation fg.deobf("net.themcbrothers:useful-foundation:${usefulfoundation_version}")
    }

    if (project.hasProperty("themcbroslib_version")) {
        // TheMCBrosLib
        implementation fg.deobf("net.themcbrothers:TheMCBrosLib:${themcbroslib_version}")
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    archiveAppendix.set("$project.mc_version")
    manifest {
        attributes([
                "Specification-Title"     : "usefulmachinery",
                "Specification-Vendor"    : "themcbrothers",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${archiveVersion.get()}",
                "Implementation-Vendor"   : "themcbrothers",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications { PublicationContainer publicationContainer ->
        publicationContainer.register("maven", MavenPublication) { MavenPublication publication ->
            publication.artifacts = [jar]
            publication.version = "$project.mc_version-$project.version"
            publication.artifactId = "useful-machinery"
        }
    }

    repositories {
        maven {
            credentials {
                username = getSecretByKey("nexus_uname")
                password = getSecretByKey("nexus_pwd")
            }

            url "https://nexus.themcbrothers.net/repository/maven-releases/"
        }
    }
}

private String getSecretByKey(String key) {
    File secretFile = file("secrets.properties")

    if (secretFile.canRead()) {
        Properties secretProps = new Properties()
        secretProps.load(new FileInputStream(secretFile))

        return secretProps[key].toString()
    }

    return null
}

// For CurseForge Deployment
curseforge {
    apiKey = getSecretByKey("curseForgeToken") // This should be kept private.
    options {
        forgeGradleIntegration = true
    }
    project {
        id = "355129" // The ID of your project. You can find this on your project Curseforge page
        changelog = file("changelog.txt") // A file can also be set using: changelog = file("changelog.txt")
        releaseType = project.curse_type // beta, alpha, release
        addGameVersion(project.mc_version)
        mainArtifact(jar) {
            displayName = "$project.modname $project.version"
            relations {
                requiredDependency "useful-foundation"
                requiredDependency "themcbroslib"
                optionalDependency "jei"
                optionalDependency "the-one-probe"
            }
        }
    }
}
